{"version":3,"sources":["webpack:///./src/components/FormWrap.vue","webpack:///./src/components/FormWrap.vue?a141","webpack:///./src/pages/Registration.vue?64d5","webpack:///./src/pages/Registration.vue","webpack:///./src/pages/Registration.vue?ba93","webpack:///./src/components/FormField.vue","webpack:///./src/components/FormField.vue?56d2","webpack:///./node_modules/@vuelidate/validators/dist/index.esm.js"],"names":["class","submitHandler","label","type","name","emits","setup","props","emit","render","onSubmit","actions","to","$route","query","id","email","v","password","components","FormField","AppLink","FormWrap","useUser","apiAuth","rules","required","minLength","emailValidators","value","$touch","$error","payload","length","for","isPhone","mask","placeholder","aria-describedby","$dirty","$errors","$message","String","default","modelValue","Boolean","Object","_typeof","obj","Symbol","iterator","constructor","prototype","isFunction","val","isObject","o","Array","isArray","normalizeValidatorObject","validator","$validator","withAsync","normalized","$async","withParams","$params","Error","concat","validatorObj","assign","withMessage","req","undefined","Date","isNaN","getTime","_","len","keys","regex","expr","test","emailRegex","email$1","minLength$1","min","_ref","trim","required$1","urlRegex"],"mappings":"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","file":"js/chunk-1ef49afb.9c423a15.js","sourcesContent":["<template>\n  <form @submit.prevent=\"submitHandler\">\n    <div class=\"p-fluid\">\n      <slot />\n    </div>\n    <slot name=\"actions\">\n      <BButton label=\"Отправить\" class=\"p-button-success\" type=\"submit\" />\n    </slot>\n  </form>\n</template>\n\n<script>\nexport default {\n  name: 'FormWrap',\n  emits: ['submited'],\n  setup (props, { emit }) {\n    const submitHandler = () => {\n      emit('submited')\n    }\n\n    return {\n      submitHandler\n    }\n  }\n}\n</script>\n","import { render } from \"./FormWrap.vue?vue&type=template&id=225af6dd&bindings={\\\"submitHandler\\\":\\\"setup\\\"}\"\nimport script from \"./FormWrap.vue?vue&type=script&lang=js\"\nexport * from \"./FormWrap.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--11-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--11-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--11-oneOf-1-2!../../node_modules/stylus-loader/index.js??ref--11-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Registration.vue?vue&type=style&index=0&lang=stylus\"","<template>\n  <div class=\"registration-page\">\n    <h1>Регистрация</h1>\n    <FormWrap @submited=\"onSubmit\">\n      <FormField label=\"Email\" id=\"email\" v-model=\"email\" :v=\"v.email\" />\n      <FormField label=\"Пароль\" id=\"password\" type=\"password\" v-model=\"password\" :v=\"v.password\" />\n      <FormField label=\"Имя\" id=\"name\" v-model=\"name\" :v=\"v.name\" />\n      <template #actions>\n        <BButton type=\"submit\">Регистрация</BButton>\n        <AppLink :to=\"{name: 'AuthPage', query: $route.query}\">\n          Вход\n        </AppLink>\n      </template>\n    </FormWrap>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport { useVuelidate } from '@vuelidate/core'\nimport { email as emailValidators, required, minLength } from '@vuelidate/validators'\nimport { useUser } from '@/hooks/useUser'\n\nimport FormField from '@/components/FormField'\nimport AppLink from '@/components/AppLink'\nimport FormWrap from '@/components/FormWrap'\n\nexport default {\n  name: 'RegistrationPage',\n  components: {\n    FormField,\n    AppLink,\n    FormWrap\n  },\n  setup () {\n    const { apiAuth } = useUser()\n    const email = ref('')\n    const password = ref('')\n    const name = ref('')\n\n    const rules = {\n      password: { required, minLength: minLength(6) },\n      email: { required, emailValidators },\n      name: { required }\n    }\n\n    const v = useVuelidate(rules, { password, email, name })\n\n    const onSubmit = async () => {\n      v.value.$touch()\n      if (v.value.$error) return\n\n      await apiAuth({\n        type: 'apiRegister',\n        payload: {\n          email: email.value,\n          password: password.value,\n          name: name.value\n        }\n      })\n    }\n\n    return {\n      email, password, onSubmit, name, v\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\">\n.registration-page\n  width 100%\n  max-width 450px\n</style>\n","import { render } from \"./Registration.vue?vue&type=template&id=9b360398&bindings={\\\"email\\\":\\\"setup\\\",\\\"password\\\":\\\"setup\\\",\\\"onSubmit\\\":\\\"setup\\\",\\\"name\\\":\\\"setup\\\",\\\"v\\\":\\\"setup\\\"}\"\nimport script from \"./Registration.vue?vue&type=script&lang=js\"\nexport * from \"./Registration.vue?vue&type=script&lang=js\"\n\nimport \"./Registration.vue?vue&type=style&index=0&lang=stylus\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"p-field\">\n    <label :for=\"id\" v-if=\"label && label.length > 0\">{{label}}</label>\n    <InputMask\n      :id=\"id\"\n      v-model=\"value\"\n      mask=\"+7 (999) 999-9999\"\n      placeholder=\"+7 (999) 999-9999\"\n      v-if=\"isPhone\"\n    />\n    <InputText\n      :id=\"id\"\n      :type=\"type\"\n      v-model=\"value\"\n      :placeholder=\"placeholder\"\n      :aria-describedby=\"`${id}-help`\"\n      :class=\"{'p-invalid': v && v.$dirty && v.$error}\"\n      v-else\n    />\n    <small\n      :id=\"`${id}-help`\"\n      class=\"p-invalid\"\n      v-if=\"v && v.$dirty && v.$error\"\n    >{{v.$errors[0].$message}}</small>\n  </div>\n</template>\n\n<script>\nimport { ref, watch } from 'vue'\n\nexport default {\n  name: 'FormField',\n  emits: ['update:modelValue'],\n  props: {\n    label: String,\n    id: {\n      type: String,\n      required: true\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    placeholder: String,\n    modelValue: String,\n    isPhone: Boolean,\n    v: Object\n  },\n  setup (props, { emit }) {\n    const value = ref(props.modelValue)\n\n    watch(value, value => {\n      emit('update:modelValue', value)\n    })\n\n    return {\n      value\n    }\n  }\n}\n</script>\n","import { render } from \"./FormField.vue?vue&type=template&id=735448c6&bindings={\\\"label\\\":\\\"props\\\",\\\"id\\\":\\\"props\\\",\\\"type\\\":\\\"props\\\",\\\"placeholder\\\":\\\"props\\\",\\\"modelValue\\\":\\\"props\\\",\\\"isPhone\\\":\\\"props\\\",\\\"v\\\":\\\"props\\\",\\\"value\\\":\\\"setup\\\"}\"\nimport script from \"./FormField.vue?vue&type=script&lang=js\"\nexport * from \"./FormField.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","import { unref } from 'vue-demi';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isObject(o) {\n  return o !== null && _typeof(o) === 'object' && !Array.isArray(o);\n}\n/**\n * Returns a standard ValidatorObject\n * Wraps a plain function into a ValidatorObject\n * @param {NormalizedValidator|Function} validator\n * @return {NormalizedValidator}\n */\n\nfunction normalizeValidatorObject(validator) {\n  return isFunction(validator.$validator) ? validator : {\n    $validator: validator\n  };\n}\nfunction isPromise(object) {\n  return isObject(object) && isFunction(object.then);\n}\nfunction withAsync(validator) {\n  var normalized = normalizeValidatorObject(validator);\n  normalized.$async = true;\n  return normalized;\n}\n/**\n * Unwraps a ValidatorResponse object, into a boolean.\n * @param {ValidatorResponse} result\n * @return {boolean}\n */\n\nfunction unwrapValidatorResponse(result) {\n  if (_typeof(result) === 'object') return result.$invalid;\n  return result;\n}\n/**\n * Unwraps a `NormalizedValidator` object, returning it's validator function.\n * @param {NormalizedValidator | Function} validator\n * @return {function}\n */\n\nfunction unwrapNormalizedValidator(validator) {\n  return validator.$validator || validator;\n}\n\n/**\n * Allows attaching parameters to a validator\n * @param {Object} $params\n * @param {NormalizedValidator|Function} $validator\n * @return {NormalizedValidator}\n */\n\nfunction withParams($params, $validator) {\n  if (!isObject($params)) throw new Error(\"[@vuelidate/validators]: First parameter to \\\"withParams\\\" should be an object, provided \".concat(_typeof($params)));\n  if (!isObject($validator) && !isFunction($validator)) throw new Error(\"[@vuelidate/validators]: Validator must be a function or object with $validator parameter\");\n  var validatorObj = normalizeValidatorObject($validator);\n  validatorObj.$params = Object.assign({}, validatorObj.$params, {}, $params);\n  return validatorObj;\n}\n\n/**\n * @callback MessageCallback\n * @param {Object} params\n * @return String\n */\n\n/**\n * Attaches a message to a validator\n * @param {MessageCallback | String} $message\n * @param {NormalizedValidator|Function} $validator\n * @return {NormalizedValidator}\n */\n\nfunction withMessage($message, $validator) {\n  if (!isFunction($message) && typeof unref($message) !== 'string') throw new Error(\"[@vuelidate/validators]: First parameter to \\\"withMessage\\\" should be string or a function returning a string, provided \".concat(_typeof($message)));\n  if (!isObject($validator) && !isFunction($validator)) throw new Error(\"[@vuelidate/validators]: Validator must be a function or object with $validator parameter\");\n  var validatorObj = normalizeValidatorObject($validator);\n  validatorObj.$message = $message;\n  return validatorObj;\n}\n\nvar req = function req(value) {\n  value = unref(value);\n  if (Array.isArray(value)) return !!value.length;\n\n  if (value === undefined || value === null) {\n    return false;\n  }\n\n  if (value === false) {\n    return true;\n  }\n\n  if (value instanceof Date) {\n    // invalid date won't pass\n    return !isNaN(value.getTime());\n  }\n\n  if (_typeof(value) === 'object') {\n    for (var _ in value) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return !!String(value).length;\n};\n/**\n * Returns the length of an arbitrary value\n * @param {Array|Object|String} value\n * @return {number}\n */\n\nvar len = function len(value) {\n  value = unref(value);\n  if (Array.isArray(value)) return value.length;\n\n  if (_typeof(value) === 'object') {\n    return Object.keys(value).length;\n  }\n\n  return String(value).length;\n};\n/**\n * Regex based validator template\n * @param {RegExp} expr\n * @return {function(*=): boolean}\n */\n\nfunction regex(expr) {\n  return function (value) {\n    value = unref(value);\n    return !req(value) || expr.test(value);\n  };\n}\n\n\n\nvar common = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  withParams: withParams,\n  withMessage: withMessage,\n  req: req,\n  len: len,\n  regex: regex,\n  unwrap: unref,\n  withAsync: withAsync\n});\n\nvar alpha = regex(/^[a-zA-Z]*$/);\n\n/**\n * Validate if value is alphabetical string.\n * @type {NormalizedValidator}\n */\n\nvar alpha$1 = {\n  $validator: alpha,\n  $message: 'The value is not alphabetical'\n};\n\nvar alphaNum = regex(/^[a-zA-Z0-9]*$/);\n\n/**\n * Validate if value is alpha-numeric string.\n * @type {NormalizedValidator}\n */\n\nvar alphaNum$1 = {\n  $validator: alphaNum,\n  $message: 'The value must be alpha-numeric'\n};\n\nvar numeric = regex(/^\\d*(\\.\\d+)?$/);\n\n/**\n * Check whether a value is numeric.\n * @type NormalizedValidator\n */\n\nvar numeric$1 = {\n  $validator: numeric,\n  $message: 'Value must be numeric'\n};\n\n/**\n * Check if a numeric value is between two values.\n * @param {Ref<Number> | Number} min\n * @param {Ref<Number> | Number} max\n * @return {function(*=): boolean}\n */\n\nfunction between (min, max) {\n  return function (value) {\n    return !req(value) || (!/\\s/.test(value) || value instanceof Date) && +unref(min) <= +value && +unref(max) >= +value;\n  };\n}\n\n/**\n * Checks if a value is between two values.\n * @param {Ref<Number> | Number} min\n * @param {Ref<Number> | Number} max\n * @return {NormalizedValidator}\n */\n\nfunction between$1 (min, max) {\n  return {\n    $validator: between(min, max),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The value must be between \".concat($params.min, \" and \").concat($params.max);\n    },\n    $params: {\n      min: min,\n      max: max\n    }\n  };\n}\n\nvar emailRegex = /^(?:[A-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9]{2,}(?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/;\nvar email = regex(emailRegex);\n\n/**\n * Validate if value is an email.\n * @type {NormalizedValidator}\n */\n\nvar email$1 = {\n  $validator: email,\n  $message: 'Value is not a valid email address'\n};\n\n/**\n * Check if a string is an IP Address\n * @param {String} value\n * @returns {boolean}\n */\n\nfunction ipAddress (value) {\n  if (!req(value)) {\n    return true;\n  }\n\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  var nibbles = value.split('.');\n  return nibbles.length === 4 && nibbles.every(nibbleValid);\n}\n\nvar nibbleValid = function nibbleValid(nibble) {\n  if (nibble.length > 3 || nibble.length === 0) {\n    return false;\n  }\n\n  if (nibble[0] === '0' && nibble !== '0') {\n    return false;\n  }\n\n  if (!nibble.match(/^\\d+$/)) {\n    return false;\n  }\n\n  var numeric = +nibble | 0;\n  return numeric >= 0 && numeric <= 255;\n};\n\n/**\n * Validate if value is an ipAddress string.\n * @type {NormalizedValidator}\n */\n\nvar ipAddress$1 = {\n  $validator: ipAddress,\n  $message: 'The value is not a valid IP address'\n};\n\n/**\n * Check if value is a properly formatted Mac Address.\n * @param {String | Ref<String>} [separator]\n * @returns {function(*): boolean}\n */\n\nfunction macAddress () {\n  var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ':';\n  return function (value) {\n    separator = unref(separator);\n\n    if (!req(value)) {\n      return true;\n    }\n\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    var parts = typeof separator === 'string' && separator !== '' ? value.split(separator) : value.length === 12 || value.length === 16 ? value.match(/.{2}/g) : null;\n    return parts !== null && (parts.length === 6 || parts.length === 8) && parts.every(hexValid);\n  };\n}\n\nvar hexValid = function hexValid(hex) {\n  return hex.toLowerCase().match(/^[0-9a-f]{2}$/);\n};\n\n/**\n * Validate if value is a valid Mac Address string.\n * @returns {NormalizedValidator}\n */\n\nfunction macAddress$1 (separator) {\n  return {\n    $validator: macAddress(separator),\n    $message: 'The value is not a valid MAC Address'\n  };\n}\n\n/**\n * Check if provided value has a maximum length\n * @param {Number | Ref<Number>} length\n * @returns {function(Array|Object|String): boolean}\n */\n\nfunction maxLength (length) {\n  return function (value) {\n    return !req(value) || len(value) <= unref(length);\n  };\n}\n\n/**\n * Validate the max length of a string.\n * @param {Number} max\n * @return {NormalizedValidator}\n */\n\nfunction maxLength$1 (max) {\n  return {\n    $validator: maxLength(max),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The maximum length allowed is \".concat($params.max);\n    },\n    $params: {\n      max: max\n    }\n  };\n}\n\n/**\n * Check if value is above a threshold.\n * @param {Number | Ref<Number>} length\n * @returns {function(Array|Object|String): boolean}\n */\n\nfunction minLength (length) {\n  return function (value) {\n    return !req(value) || len(value) >= unref(length);\n  };\n}\n\n/**\n * Check if value is above a threshold.\n * @param {Number | Ref<Number>} min\n * @returns {NormalizedValidator}\n */\n\nfunction minLength$1 (min) {\n  return {\n    $validator: minLength(min),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"This field should be at least \".concat($params.min, \" long.\");\n    },\n    $params: {\n      min: min\n    }\n  };\n}\n\n/**\n * Validates if a value is empty.\n * @param {String | Array | Date | Object} value\n * @returns {boolean}\n */\n\nfunction required (value) {\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n\n  return req(value);\n}\n\n/**\n * Check if a value is empty or not.\n * @type {NormalizedValidator}\n */\n\nvar required$1 = {\n  $validator: required,\n  $message: 'Value is required'\n};\n\nvar validate = function validate(prop, val) {\n  return prop ? req(val) : true;\n};\n/**\n * Returns required if the passed property is truthy\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {function(*): (Boolean | Promise<Boolean>)}\n */\n\n\nfunction requiredIf (prop) {\n  return function (value) {\n    if (typeof prop !== 'function') {\n      return validate(prop, value);\n    }\n\n    var result = prop();\n\n    if (isPromise(result)) {\n      return result.then(function (response) {\n        return validate(response, value);\n      });\n    }\n\n    return validate(result, value);\n  };\n}\n\n/**\n * Returns required if the passed property is truthy\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {NormalizedValidator}\n */\n\nfunction requiredIf$1 (prop) {\n  return {\n    $validator: requiredIf(prop),\n    $message: 'The value is required'\n  };\n}\n\nvar validate$1 = function validate(prop, val) {\n  return !prop ? req(val) : true;\n};\n/**\n * Returns required if the passed property is falsy.\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {function(*): (Boolean | Promise<Boolean>)}\n */\n\n\nfunction requiredUnless (prop) {\n  return function (value) {\n    if (typeof prop !== 'function') {\n      return validate$1(prop, value);\n    }\n\n    var result = prop();\n\n    if (isPromise(result)) {\n      return result.then(function (response) {\n        return validate$1(response, value);\n      });\n    }\n\n    return validate$1(result, value);\n  };\n}\n\n/**\n * Returns required unless the passed property is truthy\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {NormalizedValidator}\n */\n\nvar requiredUnless$1 = (function (prop) {\n  return {\n    $validator: requiredUnless(prop),\n    $message: 'The value is required'\n  };\n});\n\n/**\n * Check if two values are identical.\n * @param {*} equalTo\n * @return {function(*=): boolean}\n */\n\nfunction sameAs (equalTo) {\n  return function (value) {\n    return unref(value) === unref(equalTo);\n  };\n}\n\n/**\n * Check if two values are identical\n * @param {*} equalTo\n * @param {String} [otherName]\n * @return {NormalizedValidator}\n */\n\nfunction sameAs$1 (equalTo) {\n  var otherName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'other';\n  return {\n    $validator: sameAs(equalTo),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The value must be equal to the \".concat(otherName, \" value.\");\n    },\n    $params: {\n      equalTo: equalTo,\n      otherName: otherName\n    }\n  };\n}\n\nvar urlRegex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\nvar url = regex(urlRegex);\n\n/**\n * Check if a value is a url\n * @type {NormalizedValidator}\n */\n\nvar url$1 = {\n  $validator: url,\n  $message: 'The value is not a valid URL address'\n};\n\n/**\n * Returns true when one of the provided functions returns true.\n * @param {...(NormalizedValidator|Function)} validators\n * @return {function(...[*]=): boolean}\n */\n\nfunction or () {\n  for (var _len = arguments.length, validators = new Array(_len), _key = 0; _key < _len; _key++) {\n    validators[_key] = arguments[_key];\n  }\n\n  return function () {\n    var _this = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return validators.length > 0 && validators.reduce(function (valid, fn) {\n      return valid || unwrapValidatorResponse(unwrapNormalizedValidator(fn).apply(_this, args));\n    }, false);\n  };\n}\n\n/**\n * Returns true when one of the provided functions returns true.\n * @param {...(NormalizedValidator|Function)} validators\n * @return {NormalizedValidator}\n */\n\nfunction or$1 () {\n  return {\n    $validator: or.apply(void 0, arguments),\n    $message: 'The value does not match any of the provided validators'\n  };\n}\n\n/**\n * Returns true when all validators are truthy\n * @param {...(NormalizedValidator|Function)} validators\n * @return {function(...[*]=): boolean}\n */\n\nfunction and () {\n  for (var _len = arguments.length, validators = new Array(_len), _key = 0; _key < _len; _key++) {\n    validators[_key] = arguments[_key];\n  }\n\n  return function () {\n    var _this = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return validators.length > 0 && validators.reduce(function (valid, fn) {\n      return valid && unwrapValidatorResponse(unwrapNormalizedValidator(fn).apply(_this, args));\n    }, true);\n  };\n}\n\n/**\n * Validate if all validators match.\n * @param {...*} validators\n * @returns {NormalizedValidator}\n */\n\nfunction and$1 () {\n  return {\n    $validator: and.apply(void 0, arguments),\n    $message: 'The value does not match all of the provided validators'\n  };\n}\n\n/**\n * Swaps the result of a value\n * @param {NormalizedValidator|Function} validator\n * @returns {function(*=, *=): boolean}\n */\n\nfunction not (validator) {\n  return function (value, vm) {\n    return !req(value) || !unwrapValidatorResponse(unwrapNormalizedValidator(validator).call(this, value, vm));\n  };\n}\n\n/**\n * Swaps the result of a value\n * @param {NormalizedValidator|Function} validator\n * @returns {NormalizedValidator}\n */\n\nfunction not$1 (validator) {\n  return {\n    $validator: not(validator),\n    $message: \"The value does not match the provided validator\"\n  };\n}\n\n/**\n * Check if a value is above a threshold.\n * @param {String | Number | Ref<Number> | Ref<String>} min\n * @returns {function(*=): boolean}\n */\n\nfunction minValue (min) {\n  return function (value) {\n    return !req(value) || (!/\\s/.test(value) || value instanceof Date) && +value >= +unref(min);\n  };\n}\n\n/**\n * Check if a value is above a threshold.\n * @param {String | Number | Ref<Number> | Ref<String>} min\n * @returns {NormalizedValidator}\n */\n\nfunction minValue$1 (min) {\n  return {\n    $validator: minValue(min),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The minimum value allowed is \".concat($params.min);\n    },\n    $params: {\n      min: min\n    }\n  };\n}\n\n/**\n * Check if value is below a threshold.\n * @param {Number | Ref<Number> | Ref<String>} max\n * @returns {function(*=): boolean}\n */\n\nfunction maxValue (max) {\n  return function (value) {\n    return !req(value) || (!/\\s/.test(value) || value instanceof Date) && +value <= +unref(max);\n  };\n}\n\n/**\n * Check if value is below a threshold.\n * @param {Number | Ref<Number> | Ref<String>} max\n * @return {NormalizedValidator}\n */\n\nvar maxValue$1 = (function (max) {\n  return {\n    $validator: maxValue(max),\n    $message: function $message(_ref) {\n      var $params = _ref.$params;\n      return \"The maximum value is \".concat($params.max);\n    },\n    $params: {\n      max: max\n    }\n  };\n});\n\n// ^-[0-9]+$ - only for negative integer (minus sign without at least 1 digit is not a number)\n\nvar integer = regex(/(^[0-9]*$)|(^-[0-9]+$)/);\n\n/**\n * Validate if value is integer.\n * @type {NormalizedValidator}\n */\n\nvar integer$1 = {\n  $validator: integer,\n  $message: 'Value is not an integer'\n};\n\nvar decimal = regex(/^[-]?\\d*(\\.\\d+)?$/);\n\n/**\n * Validate if value is decimal number.\n * @type {NormalizedValidator}\n */\n\nvar decimal$1 = {\n  $validator: decimal,\n  $message: 'Value must be decimal'\n};\n\nexport { alpha$1 as alpha, alphaNum$1 as alphaNum, and$1 as and, between$1 as between, decimal$1 as decimal, email$1 as email, common as helpers, integer$1 as integer, ipAddress$1 as ipAddress, macAddress$1 as macAddress, maxLength$1 as maxLength, maxValue$1 as maxValue, minLength$1 as minLength, minValue$1 as minValue, not$1 as not, numeric$1 as numeric, or$1 as or, required$1 as required, requiredIf$1 as requiredIf, requiredUnless$1 as requiredUnless, sameAs$1 as sameAs, url$1 as url };\n"],"sourceRoot":""}